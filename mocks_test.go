// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package daemon

import (
	"os"

	mock "github.com/stretchr/testify/mock"
)

// newMockstdAPI creates a new instance of mockstdAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockstdAPI(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockstdAPI {
	mock := &mockstdAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockstdAPI is an autogenerated mock type for the stdAPI type
type mockstdAPI struct {
	mock.Mock
}

type mockstdAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *mockstdAPI) EXPECT() *mockstdAPI_Expecter {
	return &mockstdAPI_Expecter{mock: &_m.Mock}
}

// OSExit provides a mock function for the type mockstdAPI
func (_mock *mockstdAPI) OSExit(code int) {
	_mock.Called(code)
	return
}

// mockstdAPI_OSExit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OSExit'
type mockstdAPI_OSExit_Call struct {
	*mock.Call
}

// OSExit is a helper method to define mock.On call
//   - code int
func (_e *mockstdAPI_Expecter) OSExit(code interface{}) *mockstdAPI_OSExit_Call {
	return &mockstdAPI_OSExit_Call{Call: _e.mock.On("OSExit", code)}
}

func (_c *mockstdAPI_OSExit_Call) Run(run func(code int)) *mockstdAPI_OSExit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockstdAPI_OSExit_Call) Return() *mockstdAPI_OSExit_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockstdAPI_OSExit_Call) RunAndReturn(run func(code int)) *mockstdAPI_OSExit_Call {
	_c.Run(run)
	return _c
}

// SignalNotify provides a mock function for the type mockstdAPI
func (_mock *mockstdAPI) SignalNotify(c chan<- os.Signal, sig ...os.Signal) {
	if len(sig) > 0 {
		_mock.Called(c, sig)
	} else {
		_mock.Called(c)
	}

	return
}

// mockstdAPI_SignalNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignalNotify'
type mockstdAPI_SignalNotify_Call struct {
	*mock.Call
}

// SignalNotify is a helper method to define mock.On call
//   - c chan<- os.Signal
//   - sig ...os.Signal
func (_e *mockstdAPI_Expecter) SignalNotify(c interface{}, sig ...interface{}) *mockstdAPI_SignalNotify_Call {
	return &mockstdAPI_SignalNotify_Call{Call: _e.mock.On("SignalNotify",
		append([]interface{}{c}, sig...)...)}
}

func (_c *mockstdAPI_SignalNotify_Call) Run(run func(c chan<- os.Signal, sig ...os.Signal)) *mockstdAPI_SignalNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 chan<- os.Signal
		if args[0] != nil {
			arg0 = args[0].(chan<- os.Signal)
		}
		var arg1 []os.Signal
		var variadicArgs []os.Signal
		if len(args) > 1 {
			variadicArgs = args[1].([]os.Signal)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockstdAPI_SignalNotify_Call) Return() *mockstdAPI_SignalNotify_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockstdAPI_SignalNotify_Call) RunAndReturn(run func(c chan<- os.Signal, sig ...os.Signal)) *mockstdAPI_SignalNotify_Call {
	_c.Run(run)
	return _c
}

// SignalStop provides a mock function for the type mockstdAPI
func (_mock *mockstdAPI) SignalStop(c chan<- os.Signal) {
	_mock.Called(c)
	return
}

// mockstdAPI_SignalStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignalStop'
type mockstdAPI_SignalStop_Call struct {
	*mock.Call
}

// SignalStop is a helper method to define mock.On call
//   - c chan<- os.Signal
func (_e *mockstdAPI_Expecter) SignalStop(c interface{}) *mockstdAPI_SignalStop_Call {
	return &mockstdAPI_SignalStop_Call{Call: _e.mock.On("SignalStop", c)}
}

func (_c *mockstdAPI_SignalStop_Call) Run(run func(c chan<- os.Signal)) *mockstdAPI_SignalStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 chan<- os.Signal
		if args[0] != nil {
			arg0 = args[0].(chan<- os.Signal)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockstdAPI_SignalStop_Call) Return() *mockstdAPI_SignalStop_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockstdAPI_SignalStop_Call) RunAndReturn(run func(c chan<- os.Signal)) *mockstdAPI_SignalStop_Call {
	_c.Run(run)
	return _c
}
